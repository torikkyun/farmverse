// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum UserRole {
  FARMER
  ADMIN
  TENANT
}

enum ItemType {
  FERTILIZER
  TREEROOT
}

enum TreeRootInstanceStatus {
  GROWING
  HARVESTED
  CANCELED
}

enum TransactionType {
  DEPOSIT
  PURCHASE
}

model User {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  email                   String         @unique
  password                String
  phone                   String?        @unique
  role                    UserRole       @default(TENANT)
  avatar                  String?
  isEmailVerified         Boolean        @default(false)
  otp                     String?
  otpExpires              DateTime?
  resetPasswordOtp        String?
  resetPasswordOtpExpires DateTime?
  fvtBalance              Int            @default(0)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  Farm                    Farm?
  Transaction             Transaction[]
  ItemInstance            ItemInstance[]
}

model Farm {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String
  size        Float
  description String?
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique @db.ObjectId

  Schedules    Schedule[]
  Item         Item[]
  Transaction  Transaction[]
  ItemInstance ItemInstance[]
}

model Schedule {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  farm   Farm   @relation(fields: [farmId], references: [id])
  farmId String @db.ObjectId
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        ItemType
  description String?
  images      String[]
  price       Float
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  farm            Farm              @relation(fields: [farmId], references: [id])
  farmId          String            @db.ObjectId
  Transaction     Transaction[]
  ItemInstance    ItemInstance[]
  TransactionItem TransactionItem[]

  @@index([farmId])
}

model Transaction {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice Float
  type       TransactionType

  transactionHash String?
  blockNumber     Int?
  fromAddress     String?
  toAddress       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer           User              @relation(fields: [buyerId], references: [id])
  buyerId         String            @db.ObjectId
  item            Item?             @relation(fields: [itemId], references: [id])
  itemId          String?           @db.ObjectId
  Farm            Farm?             @relation(fields: [farmId], references: [id])
  farmId          String?           @db.ObjectId
  TransactionItem TransactionItem[]
}

model TransactionItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  includesIot Boolean?
  quantity    Int
  price       Float
  type        ItemType

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @db.ObjectId
  item          Item        @relation(fields: [itemId], references: [id])
  itemId        String      @db.ObjectId

  @@index([transactionId])
  @@index([itemId])
}

model ItemInstance {
  id        String                  @id @default(auto()) @map("_id") @db.ObjectId
  type      ItemType
  quantity  Int?
  status    TreeRootInstanceStatus?
  cameraUrl String?
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  userId  String    @db.ObjectId
  farm    Farm      @relation(fields: [farmId], references: [id])
  farmId  String    @db.ObjectId
  item    Item      @relation(fields: [itemId], references: [id])
  itemId  String    @db.ObjectId
  IotData IotData[]

  @@index([userId])
  @@index([farmId])
  @@index([itemId])
}

model IotData {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  temperature    Float?
  humidity       Float?
  soilMoisture   Float?
  lightIntensity Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  itemInstance   ItemInstance @relation(fields: [itemInstanceId], references: [id])
  itemInstanceId String       @db.ObjectId
}
