generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum UserRole {
  FARMER
  ADMIN
  TENANT
}

enum ItemType {
  FERTILIZER
  TREE
  PESTICIDE
}

enum TransactionType {
  CONTRACT
  PURCHASE
  DEPOSIT
}

enum statusRentedTree {
  GROWING
  READY_TO_HARVEST
  HARVESTING
  HARVESTED
}

enum optionHarvest {
  RECEIVE_FRUIT
  SELL_BACK
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  refreshToken String   @unique
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  password      String
  name          String
  avatar        String
  address       Json
  fvtBalance    Float         @default(0.0)
  role          UserRole
  emailVerified Boolean       @default(false)
  Farm          Farm[]
  Transaction   Transaction[]
  RentedTree    RentedTree[]
  Inventory     Inventory[]

  @@index([role])
}

model Farm {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     Json
  size        Float
  description String?
  images      String[]
  schedule    Json[]

  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  Item        Item[]
  Transaction Transaction[]
  RentedTree  RentedTree[]

  @@index([userId])
}

model Inventory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        ItemType
  description String?
  images      String[]
  stock       Int      @default(0)
  details     Json

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@index([userId])
  @@index([type])
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        ItemType
  description String?
  images      String[]
  price       Float
  stock       Int      @default(1)
  details     Json

  farm   Farm   @relation(fields: [farmId], references: [id])
  farmId String @db.ObjectId

  @@index([farmId])
  @@index([type])
}

model Transaction {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  totalPrice      Float
  transactionHash String
  blockNumber     Int
  fromAddress     String
  toAddress       String
  details         Json?
  createdAt       DateTime        @default(now())
  type            TransactionType

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  farm   Farm   @relation(fields: [farmId], references: [id])
  farmId String @db.ObjectId

  @@index([userId])
  @@index([farmId])
  @@index([type])
  @@index([createdAt])
}

model RentedTree {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  images      String[]
  details     Json
  schedule    Json[]
  cameraUrl   String?
  status      statusRentedTree
  totalProfit Float            @default(0.0)
  harvest     Json[]
  startDate   DateTime
  endDate     DateTime

  farm   Farm   @relation(fields: [farmId], references: [id])
  farmId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@index([userId])
  @@index([farmId])
  @@index([status])
  @@index([endDate])
}
